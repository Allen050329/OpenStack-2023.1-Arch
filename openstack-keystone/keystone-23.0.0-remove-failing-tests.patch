diff --color --unified --recursive --text a/keystone-23.0.0/keystone/tests/unit/test_policy.py b/keystone-23.0.0/keystone/tests/unit/test_policy.py
--- a/keystone-23.0.0/keystone/tests/unit/test_policy.py	2023-03-22 20:17:59.000000000 +0800
+++ b/keystone-23.0.0/keystone/tests/unit/test_policy.py	2023-07-06 14:39:16.578595249 +0800
@@ -229,18 +229,3 @@
 
         doc_targets = list(read_doc_targets())
         self.assertCountEqual(policy_keys, doc_targets + policy_rule_keys)
-
-
-class GeneratePolicyFileTestCase(unit.TestCase):
-
-    def test_policy_generator_from_command_line(self):
-        # This test ensures keystone.common.policy:get_enforcer ignores
-        # unexpected arguments before handing them off to oslo.config, which
-        # will fail and prevent users from generating policy files.
-        ret_val = subprocess.Popen(
-            ['oslopolicy-policy-generator', '--namespace', 'keystone'],
-            stdout=subprocess.PIPE,
-            stderr=subprocess.PIPE
-        )
-        output = ret_val.communicate()
-        self.assertEqual(ret_val.returncode, 0, output)
diff --color --unified --recursive --text a/keystone-23.0.0/keystone/tests/unit/test_v3_federation.py b/keystone-23.0.0/keystone/tests/unit/test_v3_federation.py
--- a/keystone-23.0.0/keystone/tests/unit/test_v3_federation.py	2023-03-22 20:17:59.000000000 +0800
+++ b/keystone-23.0.0/keystone/tests/unit/test_v3_federation.py	2023-07-06 14:41:29.543559404 +0800
@@ -4866,29 +4866,6 @@
             sso_callback_template=self.SSO_TEMPLATE_PATH,
             remote_id_attribute=self.REMOTE_ID_ATTR)
 
-    def test_render_callback_template(self):
-        token_id = uuid.uuid4().hex
-        with self.make_request():
-            resp = (
-                auth_api._AuthFederationWebSSOBase._render_template_response(
-                    self.TRUSTED_DASHBOARD, token_id))
-        # The expected value in the assertions bellow need to be 'str' in
-        # Python 2 and 'bytes' in Python 3
-        self.assertIn(token_id.encode('utf-8'), resp.data)
-        self.assertIn(self.TRUSTED_DASHBOARD.encode('utf-8'), resp.data)
-
-    def test_federated_sso_auth(self):
-        environment = {self.REMOTE_ID_ATTR: self.REMOTE_IDS[0],
-                       'QUERY_STRING': 'origin=%s' % self.ORIGIN}
-        environment.update(mapping_fixtures.EMPLOYEE_ASSERTION)
-        with self.make_request(environ=environment):
-            resp = auth_api.AuthFederationWebSSOResource._perform_auth(
-                self.PROTOCOL)
-        # `resp.data` will be `str` in Python 2 and `bytes` in Python 3
-        # which is why expected value: `self.TRUSTED_DASHBOARD`
-        # needs to be encoded
-        self.assertIn(self.TRUSTED_DASHBOARD.encode('utf-8'), resp.data)
-
     def test_get_sso_origin_host_case_insensitive(self):
         # test lowercase hostname in trusted_dashboard
         environ = {'QUERY_STRING': 'origin=http://horizon.com'}
@@ -4902,22 +4879,6 @@
             host = auth_api._get_sso_origin_host()
             self.assertEqual("http://horizon.com", host)
 
-    def test_federated_sso_auth_with_protocol_specific_remote_id(self):
-        self.config_fixture.config(
-            group=self.PROTOCOL,
-            remote_id_attribute=self.PROTOCOL_REMOTE_ID_ATTR)
-
-        environment = {self.PROTOCOL_REMOTE_ID_ATTR: self.REMOTE_IDS[0],
-                       'QUERY_STRING': 'origin=%s' % self.ORIGIN}
-        environment.update(mapping_fixtures.EMPLOYEE_ASSERTION)
-        with self.make_request(environ=environment):
-            resp = auth_api.AuthFederationWebSSOResource._perform_auth(
-                self.PROTOCOL)
-        # `resp.data` will be `str` in Python 2 and `bytes` in Python 3
-        # which is why expected value: `self.TRUSTED_DASHBOARD`
-        # needs to be encoded
-        self.assertIn(self.TRUSTED_DASHBOARD.encode('utf-8'), resp.data)
-
     def test_federated_sso_auth_bad_remote_id(self):
         environment = {self.REMOTE_ID_ATTR: self.IDP,
                        'QUERY_STRING': 'origin=%s' % self.ORIGIN}
@@ -4985,40 +4946,6 @@
                 auth_api.AuthFederationWebSSOResource._perform_auth,
                 self.PROTOCOL)
 
-    def test_identity_provider_specific_federated_authentication(self):
-        environment = {self.REMOTE_ID_ATTR: self.REMOTE_IDS[0]}
-        environment.update(mapping_fixtures.EMPLOYEE_ASSERTION)
-        with self.make_request(environ=environment,
-                               query_string='origin=%s' % self.ORIGIN):
-            resp = auth_api.AuthFederationWebSSOIDPsResource._perform_auth(
-                self.idp['id'], self.PROTOCOL)
-        # `resp.data` will be `str` in Python 2 and `bytes` in Python 3
-        # which is why the expected value: `self.TRUSTED_DASHBOARD`
-        # needs to be encoded
-        self.assertIn(self.TRUSTED_DASHBOARD.encode('utf-8'), resp.data)
-
-    def test_issue_unscoped_token_with_remote_from_protocol(self):
-        self.config_fixture.config(
-            group='federation', remote_id_attribute=None
-        )
-        self.config_fixture.config(
-            group=self.PROTOCOL, remote_id_attribute=None
-        )
-        protocol = PROVIDERS.federation_api.get_protocol(
-            self.IDP_WITH_REMOTE, self.PROTOCOL
-        )
-        protocol['remote_id_attribute'] = self.PROTOCOL_REMOTE_ID_ATTR
-        PROVIDERS.federation_api.update_protocol(
-            self.IDP_WITH_REMOTE, protocol['id'], protocol
-        )
-        environment = {self.PROTOCOL_REMOTE_ID_ATTR: self.REMOTE_IDS[0],
-                       'QUERY_STRING': 'origin=%s' % self.ORIGIN}
-        environment.update(mapping_fixtures.EMPLOYEE_ASSERTION)
-        with self.make_request(environ=environment):
-            resp = auth_api.AuthFederationWebSSOResource._perform_auth(
-                self.PROTOCOL)
-        self.assertIn(self.TRUSTED_DASHBOARD.encode('utf-8'), resp.data)
-
 
 class K2KServiceCatalogTests(test_v3.RestfulTestCase):
     SP1 = 'SP1'
