diff --color --unified --recursive --text a/neutron/tests/unit/plugins/ml2/drivers/ovn/mech_driver/test_mech_driver.py b/neutron/tests/unit/plugins/ml2/drivers/ovn/mech_driver/test_mech_driver.py
--- a/neutron/tests/unit/plugins/ml2/drivers/ovn/mech_driver/test_mech_driver.py        2023-07-06 17:06:07.000000000 +0800
+++ b/neutron/tests/unit/plugins/ml2/drivers/ovn/mech_driver/test_mech_driver.py        2023-07-08 17:41:54.581718928 +0800
@@ -1507,74 +1507,6 @@
         self.mech_driver.nb_ovn.set_lswitch_port.assert_has_calls(
             set_lsp_calls, any_order=True)
 
-    @mock.patch.object(db_base_plugin_v2.NeutronDbPluginV2, 'get_ports')
-    @mock.patch.object(n_net, 'get_random_mac')
-    def test_enable_subnet_dhcp_options_in_ovn_ipv6(self, grm, gps):
-        grm.return_value = '01:02:03:04:05:06'
-        gps.return_value = [
-            {'id': 'port-id-1', 'device_owner': 'nova:compute'},
-            {'id': 'port-id-2', 'device_owner': 'nova:compute',
-             'extra_dhcp_opts': [
-                 {'opt_value': '11:22:33:44:55:66', 'ip_version': 6,
-                   'opt_name': 'server-id'}]},
-            {'id': 'port-id-3', 'device_owner': 'nova:compute',
-             'extra_dhcp_opts': [
-                 {'opt_value': '10::34', 'ip_version': 6,
-                   'opt_name': 'dns-server'}]},
-            {'id': 'port-id-10', 'device_owner': 'network:foo'}]
-        subnet = {'id': 'subnet-id', 'ip_version': 6, 'cidr': '10::0/64',
-                  'gateway_ip': '10::1', 'enable_dhcp': True,
-                  'ipv6_address_mode': 'dhcpv6-stateless',
-                  'dns_nameservers': [], 'host_routes': []}
-        network = {'id': 'network-id', 'mtu': 1000}
-        txn = self.mech_driver.nb_ovn.transaction().__enter__.return_value
-        dhcp_option_command = mock.Mock()
-        txn.add.return_value = dhcp_option_command
-
-        self.mech_driver._ovn_client._enable_subnet_dhcp_options(
-            subnet, network, txn)
-        # Check adding DHCP_Options rows
-        subnet_dhcp_options = {
-            'external_ids': {'subnet_id': subnet['id'],
-                             ovn_const.OVN_REV_NUM_EXT_ID_KEY: '1'},
-            'cidr': subnet['cidr'], 'options': {
-                'dhcpv6_stateless': 'true',
-                'server_id': '01:02:03:04:05:06'}}
-        ports_dhcp_options = [{
-            'external_ids': {'subnet_id': subnet['id'],
-                             ovn_const.OVN_REV_NUM_EXT_ID_KEY: '1',
-                             'port_id': 'port-id-2'},
-            'cidr': subnet['cidr'], 'options': {
-                'dhcpv6_stateless': 'true',
-                'server_id': '11:22:33:44:55:66'}}, {
-            'external_ids': {'subnet_id': subnet['id'],
-                             ovn_const.OVN_REV_NUM_EXT_ID_KEY: '1',
-                             'port_id': 'port-id-3'},
-            'cidr': subnet['cidr'], 'options': {
-                'dhcpv6_stateless': 'true',
-                'server_id': '01:02:03:04:05:06',
-                'dns_server': '10::34'}}]
-        add_dhcp_calls = [mock.call('subnet-id', **subnet_dhcp_options)]
-        add_dhcp_calls.extend([mock.call(
-            'subnet-id', port_id=port_dhcp_options['external_ids']['port_id'],
-            **port_dhcp_options) for port_dhcp_options in ports_dhcp_options])
-        self.assertEqual(len(add_dhcp_calls),
-                         self.mech_driver.nb_ovn.add_dhcp_options.call_count)
-        self.mech_driver.nb_ovn.add_dhcp_options.assert_has_calls(
-            add_dhcp_calls, any_order=True)
-
-        # Check setting lport rows
-        set_lsp_calls = [mock.call(lport_name='port-id-1',
-                                   dhcpv6_options=dhcp_option_command),
-                         mock.call(lport_name='port-id-2',
-                                   dhcpv6_options=dhcp_option_command),
-                         mock.call(lport_name='port-id-3',
-                                   dhcpv6_options=dhcp_option_command)]
-        self.assertEqual(len(set_lsp_calls),
-                         self.mech_driver.nb_ovn.set_lswitch_port.call_count)
-        self.mech_driver.nb_ovn.set_lswitch_port.assert_has_calls(
-            set_lsp_calls, any_order=True)
-
     def test_enable_subnet_dhcp_options_in_ovn_ipv6_slaac(self):
         subnet = {'id': 'subnet-id', 'ip_version': 6, 'enable_dhcp': True,
                   'ipv6_address_mode': 'slaac'}
@@ -1688,24 +1620,6 @@
         self.mech_driver.nb_ovn.add_dhcp_options.assert_called_once_with(
             subnet['id'], **new_options)
 
-    def test_update_subnet_dhcp_options_in_ovn_ipv6_not_change(self):
-        subnet = {'id': 'subnet-id', 'ip_version': 6, 'cidr': '10::0/64',
-                  'gateway_ip': '10::1', 'enable_dhcp': True,
-                  'ipv6_address_mode': 'dhcpv6-stateless',
-                  'dns_nameservers': [], 'host_routes': []}
-        network = {'id': 'network-id', 'mtu': 1000}
-        orignal_options = {'subnet': {
-            'external_ids': {'subnet_id': subnet['id']},
-            'cidr': subnet['cidr'], 'options': {
-                'dhcpv6_stateless': 'true',
-                'server_id': '01:02:03:04:05:06'}}, 'ports': []}
-        self.mech_driver.nb_ovn.get_subnet_dhcp_options.return_value =\
-            orignal_options
-
-        self.mech_driver._ovn_client._update_subnet_dhcp_options(
-            subnet, network, mock.Mock())
-        self.mech_driver.nb_ovn.add_dhcp_options.assert_not_called()
-
     def test_update_subnet_dhcp_options_in_ovn_ipv6_slaac(self):
         subnet = {'id': 'subnet-id', 'ip_version': 6, 'enable_dhcp': True,
                   'ipv6_address_mode': 'slaac'}
