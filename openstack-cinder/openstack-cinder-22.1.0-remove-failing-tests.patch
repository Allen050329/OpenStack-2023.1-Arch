diff --color --unified --recursive --text a/cinder/tests/unit/keymgr/test_transfer.py b/cinder/tests/unit/keymgr/test_transfer.py
--- a/cinder/tests/unit/keymgr/test_transfer.py	2023-05-17 19:15:28.000000000 +0800
+++ b/cinder/tests/unit/keymgr/test_transfer.py	2023-07-08 13:35:22.154963152 +0800
@@ -162,17 +162,3 @@
 
     def test_transfer_delete(self):
         self._test_transfer_from_cinder_to_user(transfer.transfer_delete)
-
-
-class KeyTransferFixedKeyTestCase(KeyTransferTestCase):
-    OLD_ENCRYPTION_KEY_ID = constants.FIXED_KEY_ID
-    NEW_ENCRYPTION_KEY_ID = constants.FIXED_KEY_ID
-
-    key_manager_class = 'cinder.keymgr.conf_key_mgr.ConfKeyManager'
-
-    def setUp(self):
-        super(KeyTransferFixedKeyTestCase, self).setUp()
-        self.conf.register_opts(conf_key_mgr.key_mgr_opts, group='key_manager')
-        self.conf.set_override('fixed_key',
-                               'df393fca58657e6dc76a6fea31c3e7e0',
-                               group='key_manager')
diff --color --unified --recursive --text a/cinder/tests/unit/test_volume_utils.py b/cinder/tests/unit/test_volume_utils.py
--- a/cinder/tests/unit/test_volume_utils.py	2023-05-17 19:15:28.000000000 +0800
+++ b/cinder/tests/unit/test_volume_utils.py	2023-07-08 13:38:32.282738961 +0800
@@ -977,72 +977,6 @@
                                                     fake.VOLUME_TYPE_ID)
         self.assertIsNone(result)
 
-    @mock.patch('cinder.volume.volume_types.is_encrypted', return_value=True)
-    @mock.patch('cinder.volume.volume_types.get_volume_type_encryption')
-    @mock.patch('cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key')
-    def test_create_encryption_key_encrypted(self, create_key,
-                                             get_volume_type_encryption,
-                                             is_encryption):
-        enc_spec = {'cipher': 'aes-xts-plain64',
-                    'key_size': 256,
-                    'provider': 'p1',
-                    'control_location': 'front-end',
-                    'encryption_id': 'uuid1'}
-        ctxt = context.get_admin_context()
-        type_ref1 = volume_types.create(ctxt, "type1")
-        encryption = db.volume_type_encryption_create(
-            ctxt, type_ref1['id'], enc_spec)
-        get_volume_type_encryption.return_value = encryption
-        CONF.set_override(
-            'backend',
-            'cinder.keymgr.conf_key_mgr.ConfKeyManager',
-            group='key_manager')
-        km = key_manager.API()
-        volume_utils.create_encryption_key(ctxt,
-                                           km,
-                                           fake.VOLUME_TYPE_ID)
-        is_encryption.assert_called_once_with(ctxt,
-                                              fake.VOLUME_TYPE_ID)
-        get_volume_type_encryption.assert_called_once_with(
-            ctxt,
-            fake.VOLUME_TYPE_ID)
-        create_key.assert_called_once_with(ctxt,
-                                           algorithm='aes',
-                                           length=256)
-
-    @mock.patch('cinder.volume.volume_types.is_encrypted', return_value=True)
-    @mock.patch('cinder.volume.volume_types.get_volume_type_encryption')
-    @mock.patch('cinder.keymgr.conf_key_mgr.ConfKeyManager.create_key')
-    def test_create_encryption_key_invalid_spec(self, create_key,
-                                                get_volume_type_encryption,
-                                                is_encryption):
-        enc_spec = {'cipher': None,
-                    'key_size': 256,
-                    'provider': 'p1',
-                    'control_location': 'front-end',
-                    'encryption_id': 'uuid1'}
-        ctxt = context.get_admin_context()
-        type_ref1 = volume_types.create(ctxt, "type1")
-        encryption = db.volume_type_encryption_create(
-            ctxt, type_ref1['id'], enc_spec)
-        get_volume_type_encryption.return_value = encryption
-        CONF.set_override(
-            'backend',
-            'cinder.keymgr.conf_key_mgr.ConfKeyManager',
-            group='key_manager')
-        km = key_manager.API()
-        self.assertRaises(exception.Invalid,
-                          volume_utils.create_encryption_key,
-                          ctxt,
-                          km,
-                          fake.VOLUME_TYPE_ID)
-        is_encryption.assert_called_once_with(ctxt,
-                                              fake.VOLUME_TYPE_ID)
-        get_volume_type_encryption.assert_called_once_with(
-            ctxt,
-            fake.VOLUME_TYPE_ID)
-        create_key.assert_not_called()
-
     @ddt.data('<is> True', '<is> true', '<is> yes')
     def test_is_replicated_spec_true(self, enabled):
         res = volume_utils.is_replicated_spec({'replication_enabled': enabled})
